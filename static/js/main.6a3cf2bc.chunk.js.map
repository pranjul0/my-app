{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","onClick","enableDarkMode","type","role","id","htmlFor","style","color","to","Textform","useState","text","setText","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","About","mystyle","setmystyle","BtnText","setBtnText","Alert","alert","msg","App","setMode","setAlert","showAlert","message","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6a3cf2bc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n             <nav className={`navbar navbar-expand-lg navbar- ${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <form className=\"d-flex\">\r\n                <div className={`form-check form-switch text- ${props.mode === 'light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input mx-3\" onClick={props.enableDarkMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label mx-3\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n        </div>\r\n      </form>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n        \r\n          <Link className=\"nav-link active\" style={{color: props.mode === 'dark'?'white':'black' }} aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n       <Link className=\"nav-link\" style={{color: props.mode === 'dark'?'white':'black' }} to=\"/About\">About</Link>\r\n        </li>\r\n      </ul>\r\n      \r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string}\r\n// Navbar.defaultProps = {title: 'Pranzul'}","import React, {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n    \r\n\r\nconst handleUpClick = () =>{\r\n    // console.log('Text was change to uppercase');\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n}\r\nconst handleLowClick = () =>{\r\n    // console.log('Text was change to uppercase');\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n}\r\n    const handleClearClick = () =>{\r\n    let newText = ('');\r\n    setText(newText)\r\n}\r\n    const handleOnChange = (event) =>{\r\n        // console.log('On Change');\r\n        setText(event.target.value);\r\n    }\r\n\r\n   const handleCopy = ()=>{\r\n       var text = document.getElementById(\"myBox\");\r\n       text.select();\r\n       navigator.clipboard.writeText(text.value);\r\n   }\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    // setText(\"PRANZUL\");\r\n    return (\r\n        <>\r\n <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black' }}>\r\n        <h1>{props.heading}</h1>\r\n        \r\n       <div className=\"mb-3\">\r\n         <textarea  className=\"form-control\" id=\"myBox\" onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'grey':'white' , color: props.mode === 'dark'?'white':'grey'  }} rows='8' value = {text} >\r\n         </textarea> \r\n       </div>\r\n        <button className=\"btn btn-warning my-2 mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-warning my-2 mx-2\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-warning my-2 mx-2\" onClick={handleClearClick}>Clear</button>\r\n        <button className=\"btn btn-warning my-2 mx-2\" onClick={handleCopy}>Copy</button>\r\n      \r\n </div>\r\n <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black' }}>\r\n     \r\n     <h1>Your Text Summary </h1>\r\n     <p>{text.split(\" \").length} words and {text.length} Char</p>\r\n </div>\r\n\r\n </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n   const [mystyle, setmystyle] = useState(  {\r\n    color: 'white',\r\n    backgroundColor: 'Black',\r\n})\r\nconst [BtnText, setBtnText] = useState(\"Enable Light Mode\")\r\nconst DarkMode=()=>{\r\n    if(mystyle.color === 'white') {\r\n     setmystyle(  {\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n    })\r\n        setBtnText(\"Enable Dark Mode\")\r\n    }\r\n    else{\r\n        setmystyle(  {\r\n            color: 'white',\r\n            backgroundColor: 'Black',\r\n        })\r\n        setBtnText(\"Enable Light Mode\")\r\n    }\r\n\r\n}\r\n    return (\r\n        <div className =\"container\" style={mystyle}>\r\n            <h1 className=\"heading my-4 mx-3\">About Us</h1>\r\n              <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\"style={mystyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\"style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\"style={mystyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\"style={mystyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <button className=\"btn btn-warning my-3\" onClick={DarkMode}>{BtnText}</button>\r\n         </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props){\r\n    return (\r\n        \r\n              props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n             <strong>{ props.alert.type } </strong>:{props.alert.msg} \r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n                    \r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About  from './components/About';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type) =>{\n        setAlert({\n          msg: message,\n          type: type\n        })\n  }\n\n  const enableDarkMode = ()=>{\n        if(mode === 'light'){\n          setMode('dark');\n          document.body.style.backgroundColor = '#042743';\n          showAlert('Dark Mode Enable', \"Success\")\n        }\n        else{\n          setMode('light');\n          document.body.style.backgroundColor = 'white';\n          showAlert('Light Mode Enable', \"Success\")\n        }\n  }\n  return (\n    <>\n <Router>\n          <Navbar mode={mode} enableDarkMode={enableDarkMode}/>\n          <Alert alert={alert}/>\n          <div className=\"container my-3\" >\n                  <Switch>\n                    <Route exact path=\"/about\">\n                    <About />\n                    </Route>\n                    <Route exact path=\"/\">\n                    <TextForm heading='Enter the text to analyze Below' mode={mode}/> \n                    </Route>\n                  </Switch>\n          </div>\n </Router>      \n\n    \n    \n\n   \n          \n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}